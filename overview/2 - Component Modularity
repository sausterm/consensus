
Single Responsibility Principle (SRP):

    Each component should ideally be responsible for a single piece of functionality. This makes it easier to maintain, test, and reuse.
    For example, a Button component should just be responsible for rendering a button and managing its interactions, not for fetching data or changing global state.

Reusable Components:

    Components should be designed in a way that they can be reused across multiple parts of an application, or even across multiple applications.
    Reusability is achieved by making components generic. For instance, instead of a LoginButton, you can have a Button component that accepts props to determine its behavior and appearance.


Container vs. Presentational Components:


Presentational (or Dumb) Components: These components are purely for presentation. They don't manage state or make API calls. They render UI based on the props they receive.


Dumb Components: Only responsible for rendering UI. All data should be passed in via props.

                interface ButtonProps {
                    label: string;
                    onClick: () => void;
                }

                const Button: React.FC<ButtonProps> = ({ label, onClick }) => {
                    return <button onClick={onClick}>{label}</button>;
                }; 


    Container (or Smart) Components: These components manage data fetching, state, and other side-effects. They wrap one or more presentational components.

                const UserListContainer: React.FC = () => {
            const [users, setUsers] = useState<User[]>([]);

            useEffect(() => {
                // fetch users and set state
            }, []);

            return <UserList users={users} />;
        };

Composition Over Inheritance:

    Components can be composed together to create complex UIs. This is usually done using props.children or by passing components as props.
    React favors composition over inheritance, meaning that instead of creating a new version of a component that inherits properties from a parent, you wrap components within other components to achieve desired behavior.